package simpledb;

import java.io.*;
import java.util.*;

/**
 * HeapFile is an implementation of a DbFile that stores a collection of tuples
 * in no particular order. Tuples are stored on pages, each of which is a fixed
 * size, and the file is simply a collection of those pages. HeapFile works
 * closely with HeapPage. The format of HeapPages is described in the HeapPage
 * constructor.
 *
 * @author Sam Madden
 * @see simpledb.HeapPage#HeapPage
 */
public class HeapFile implements DbFile {

    /**
     * Constructs a heap file backed by the specified file.
     *
     * @param f the file that stores the on-disk backing store for this heap
     *          file.
     */
	
	private File f = null;
	private TupleDesc tdsc = null;
	
    public HeapFile(File f, TupleDesc td) {
        this.f = f;
        this.tdsc = td;
    }

    /**
     * Returns the File backing this HeapFile on disk.
     *
     * @return the File backing this HeapFile on disk.
     */
    public File getFile() {
        return this.f;
    }

    /**
     * Returns an ID uniquely identifying this HeapFile. Implementation note:
     * you will need to generate this tableid somewhere ensure that each
     * HeapFile has a "unique id," and that you always return the same value for
     * a particular HeapFile. We suggest hashing the absolute file name of the
     * file underlying the heapfile, i.e. f.getAbsoluteFile().hashCode().
     *
     * @return an ID uniquely identifying this HeapFile.
     */
    public int getId() {
        return f.getAbsoluteFile().hashCode();
    }

    /**
     * Returns the TupleDesc of the table stored in this DbFile.
     *
     * @return TupleDesc of this DbFile.
     */
    public TupleDesc getTupleDesc() {
        return this.tdsc;
    }

    // see DbFile.java for javadocs
    public Page readPage(PageId pid) {

        try{
        	InputStream input = new FileInputStream(getFile());
        	int pgno = pid.pageNumber();
        	input.skip(BufferPool.PAGE_SIZE * pgno);
        	byte[] buffer = new byte[BufferPool.PAGE_SIZE];
        	input.read(buffer, 0, BufferPool.PAGE_SIZE);
        	input.close();
        	return new HeapPage((HeapPageId)pid, buffer);
        } catch (Exception e) {}
        return null;
    }

    // see DbFile.java for javadocs
    public void writePage(Page page) throws IOException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Returns the number of pages in this HeapFile.
     */
    public int numPages() {
    	try{
    		InputStream input = new FileInputStream(getFile());
    		int data = input.read();
    		int count = 1;
    		while(data != -1){
    			data = input.read();
    			count++;
    		}
    		input.close();
    		return count/BufferPool.PAGE_SIZE;
    	} catch (Exception e) {}
    	return 0;
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) throws DbException,
            TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }
    
    public class myIterator implements DbFileIterator{
    	private int tableid;
    	private int curpage;
    	private Tuple next = null;
    	TransactionId tid;
    	Iterator<Tuple> pageit = null;
    	
    	public myIterator(TransactionId tid){
    		this.tid = tid;
    		this.tableid = getId();
    		curpage = 0;
    		next = null;
    	}
    	
    	public boolean hasNext() {
    		if (next == null) {
                fetchNext();
            }
            return next != null;
        }
    	
    	public void fetchNext(){
    		try{
	    		if (pageit == null){
	    			BufferPool bp = Database.getBufferPool();
	    			HeapPage page = (HeapPage) bp.getPage(tid, new HeapPageId(tableid, curpage), Permissions.READ_ONLY);
	    			pageit = page.iterator();
	    		}
    		} catch (Exception e) {}
    	}
    	
    	public Tuple next(){
    		if (!hasNext()) {
                throw new NoSuchElementException("no more.");
            }
            Tuple tup = next;
            next = null;                
            return tup;
    	}
    	
    	public void rewind(){
    		curpage = 0;
    		next = null;
    	}
    	
    	public void open(){
    		
    	}
    	
    	public void close(){
    		
    	}
    	
    	public void remove() {
            throw new UnsupportedOperationException("nope.");
        }
    }
    
    // see DbFile.java for javadocs
    public DbFileIterator iterator(TransactionId tid) {
        return new myIterator(tid);
    }

}

